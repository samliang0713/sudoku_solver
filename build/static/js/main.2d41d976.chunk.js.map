{"version":3,"sources":["components/Header.js","components/Button.js","components/SolutionButton.js","components/ImportButton.js","sudoku/visual.js","sudoku/algorithm.js","components/Panel.js","components/Solver.js","components/App.js","index.js"],"names":["Header","props","className","id","Button","onClick","onButtonClick","text","SolutionButton","state","solutionNum","solve","board","length","display","setState","updateText","renderText","this","prevProps","prevState","_","isEqual","React","Component","ImportButton","renderForm","onSubmit","onFormSubmit","type","inputMode","value","numString","placeholder","onChange","e","updateNumString","removeProgressSquares","currentProgressSquares","document","getElementsByClassName","Array","from","forEach","square","classList","remove","removeSolutionSquares","currentSolutionSquares","newBoard","i","isLegalMove","num","row","col","j","rowBlockIndex","Math","floor","colBlockIndex","isLegalPlacement","solveHelper","solutionList","isFilled","push","cloneDeep","nextEmptyCoordinates","Error","findNextEmpty","isBoardLegal","window","alert","solution","generateRandomNineNum","temp","randomNineNum","m","random","generateRandomFilledBoard","k","randomNine","z","randomBoard","fillBlock","splice","numsToFillFirstColumn","filter","pop","calculateSumOfCandidates","puzzleBoard","nums","sumOfCandidates","Panel","useState","setNumString","pairA","nextBoard","difficultyEstimate","generateSudoku","setBoard","setProgressBoard","console","log","solutionBoard","progressSquares","add","currentBoard","progressBoard","emptyBoard","preventDefault","target","importBoard","Solver","n","parseInt","processInput","contains","Number","isInteger","nativeEvent","data","targetRow","targetCol","rowCounter","colCounter","map","getElementById","renderBoard","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.2d41d976.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"ui one item menu\" id=\"header\">\r\n        <div className=\"item\">Sudoku Solver</div>\r\n      </div>\r\n\r\n      <div className=\"ui center aligned text container\" id=\"instruction\">\r\n        <p>Start playing in 1 of the 3 following ways:</p>\r\n        <div id=\"waysWrapper\">\r\n          <div className=\"ui left aligned text container\" id=\"waysToStart\">\r\n            1. Click <b>\"Generate Sudoku\"</b> <br />\r\n            2. Enter your board and then click <b>\"Set Board\"</b> <br />\r\n            3. Click <b>\"Import Puzzle\"</b> to import a puzzle <br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div className=\"buttonWrap\">\r\n      <button onClick={props.onButtonClick}>{props.text}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport Button from \"./Button\";\r\n\r\nclass SolutionButton extends React.Component {\r\n  state = {\r\n    solutionNum: this.props.solve(this.props.board).length,\r\n    text: \"\",\r\n    display: false,\r\n  };\r\n\r\n  onButtonClick = () => {\r\n    this.setState({\r\n      display: !this.state.display,\r\n      text: this.updateText(this.state.solutionNum),\r\n    });\r\n  };\r\n\r\n  updateText = (solutionNum) => {\r\n    if (solutionNum === 0) return \"This board does not have a solution\";\r\n    else if (solutionNum === 1) return \"This board has 1 solution\";\r\n    else if (solutionNum > 600) return \"This board has more than 600 solutions\";\r\n    else return `This board has ${solutionNum} solution(s)`;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.updateText(this.state.solutionNum) });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.board, this.props.board)) {\r\n      this.setState({\r\n        solutionNum: this.props.solve(this.props.board).length,\r\n        display: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  renderText = () => {\r\n    if (this.state.display) {\r\n      return (\r\n        <div className=\"ui pointing label\">\r\n          <p>{this.state.text}</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"solutionButton\">\r\n        <Button onButtonClick={this.onButtonClick} text=\"Show # of Solutions\" />\r\n        {this.renderText()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SolutionButton;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nclass ImportButton extends React.Component {\r\n  state = { display: false };\r\n\r\n  onButtonClick = () => {\r\n    this.setState({ display: !this.state.display });\r\n  };\r\n\r\n  renderForm = () => {\r\n    if (this.state.display) {\r\n      return (\r\n        <div className=\"ui pointing label\">\r\n          <form onSubmit={this.props.onFormSubmit}>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                id=\"importNumString\"\r\n                value={this.props.numString}\r\n                placeholder=\"Enter a 81-digit string\"\r\n                onChange={(e) => this.props.updateNumString(e)}\r\n              ></input>\r\n              <div>\r\n                <button>Submit</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"importButton\">\r\n        <Button onButtonClick={this.onButtonClick} text=\"Import Puzzle\" />\r\n        {this.renderForm()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportButton;\r\n","const printBoard = function (board) {\r\n  for (let i = 0; i < board.length; i++) {\r\n    let rowContent = \"\";\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      rowContent += board[i][j] + \" \";\r\n      if (j === 2 || j === 5) rowContent += \"| \";\r\n    }\r\n    console.log(rowContent);\r\n    if (i === 2 || i === 5) console.log(\"- - - + - - - + - - -\");\r\n  }\r\n};\r\n\r\nconst removeProgressSquares = function () {\r\n  const currentProgressSquares = document.getElementsByClassName(\"progress\");\r\n  Array.from(currentProgressSquares).forEach((square) => {\r\n    square.classList.remove(\"progress\");\r\n  });\r\n};\r\n\r\nconst removeSolutionSquares = function () {\r\n  const currentSolutionSquares = document.getElementsByClassName(\"solution\");\r\n  Array.from(currentSolutionSquares).forEach((square) => {\r\n    square.classList.remove(\"solution\");\r\n  });\r\n};\r\n\r\nexport { printBoard, removeProgressSquares, removeSolutionSquares };\r\n","import _ from \"lodash\";\r\n\r\nconst newBoard = function () {\r\n  const board = new Array(9);\r\n  for (let i = 0; i < board.length; i++) {\r\n    board[i] = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  }\r\n  return board;\r\n};\r\n\r\nconst isLegalMove = function (num, row, col, board) {\r\n  if (num > 9 || num < 1 || row > 9 || row < 1 || col > 9 || col < 1) {\r\n    return false;\r\n  }\r\n\r\n  // check row\r\n  for (let j = 0; j < board.length; j++) {\r\n    if (j === col - 1) continue;\r\n    if (board[row - 1][j] === num) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // check col\r\n  for (let i = 0; i < board[0].length; i++) {\r\n    if (i === row - 1) continue;\r\n    if (board[i][col - 1] === num) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // check block\r\n  const rowBlockIndex = Math.floor((row - 1) / 3) * 3;\r\n  const colBlockIndex = Math.floor((col - 1) / 3) * 3;\r\n\r\n  for (let i = rowBlockIndex; i < rowBlockIndex + 3; i++) {\r\n    for (let j = colBlockIndex; j < colBlockIndex + 3; j++) {\r\n      if (i === row - 1 && j === col - 1) continue;\r\n      if (board[i][j] === num) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst isLegalPlacement = function (num, row, col, board) {\r\n  if (num === 0) return true;\r\n  return isLegalMove(num, row, col, board);\r\n};\r\n\r\nconst isBoardLegal = function (board) {\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      if (\r\n        board[i][j] !== 0 &&\r\n        !isLegalPlacement(board[i][j], i + 1, j + 1, board)\r\n      )\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// find next empty location by row\r\nconst findNextEmpty = function (row, col, board) {\r\n  if (row > 9 || row < 1 || col > 9 || col < 1) {\r\n    throw new Error(\"Invalid row or col number\");\r\n  }\r\n\r\n  for (let j = col - 1; j < board[0].length; j++) {\r\n    if (board[row - 1][j] === 0) return [row, j + 1];\r\n  }\r\n\r\n  for (let i = row; i < board.length; i++) {\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      if (board[i][j] === 0) return [i + 1, j + 1];\r\n    }\r\n  }\r\n\r\n  throw new Error(\"Cannot find next Empty!\");\r\n};\r\n\r\nconst isFilled = function (board) {\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      if (board[i][j] === 0) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst isSolved = function (board) {\r\n  for (let row = 1; row <= board.length; row++) {\r\n    for (let col = 1; col < board.length; col++) {\r\n      if (isLegalPlacement(board[row - 1][col - 1], row, col, board))\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// Uses backtracking algorithm to solve the sudoku puzzle\r\nconst solveHelper = function (row, col, board, solutionList) {\r\n  if (isFilled(board)) {\r\n    solutionList.push(_.cloneDeep(board));\r\n    return;\r\n  }\r\n\r\n  if (board[row - 1][col - 1] !== 0) {\r\n    const nextEmptyCoordinates = findNextEmpty(row, col, board);\r\n    row = nextEmptyCoordinates[0];\r\n    col = nextEmptyCoordinates[1];\r\n  }\r\n\r\n  for (let i = 1; i <= 9; i++) {\r\n    if (solutionList.length >= 600) break;\r\n    if (isLegalMove(i, row, col, board)) {\r\n      board[row - 1][col - 1] = i;\r\n      solveHelper(row, col, board, solutionList);\r\n      board[row - 1][col - 1] = 0;\r\n    }\r\n  }\r\n};\r\n\r\nconst solve = function (board) {\r\n  if (!isBoardLegal(board)) {\r\n    window.alert(\"No solution because the board violates rules\");\r\n    return [];\r\n  }\r\n  const solution = _.cloneDeep(board);\r\n\r\n  const solutionList = [];\r\n  solveHelper(1, 1, solution, solutionList);\r\n  if (solutionList.length === 0) {\r\n    window.alert(\"No solution available\");\r\n    return [];\r\n  }\r\n  return solutionList;\r\n};\r\n\r\nconst generateRandomNineNum = function () {\r\n  const randomNineNum = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  let m = randomNineNum.length,\r\n    i,\r\n    temp;\r\n  while (m) {\r\n    i = Math.floor(Math.random() * m);\r\n    m -= 1;\r\n    temp = randomNineNum[m];\r\n    randomNineNum[m] = randomNineNum[i];\r\n    randomNineNum[i] = temp;\r\n  }\r\n  return randomNineNum;\r\n};\r\n\r\nconst generateRandomFilledBoard = function () {\r\n  const randomBoard = newBoard();\r\n\r\n  // Randomly fill the top-left, top-middle, and top-right blocks\r\n  let k, rowBlockIndex, colBlockIndex, randomNine, i, j, z;\r\n\r\n  k = 0;\r\n\r\n  fillBlock: while (k < 3) {\r\n    rowBlockIndex = 0;\r\n    colBlockIndex = k * 3;\r\n    randomNine = generateRandomNineNum();\r\n    for (i = rowBlockIndex; i < rowBlockIndex + 3; i++) {\r\n      for (j = colBlockIndex; j < colBlockIndex + 3; j++) {\r\n        for (z = 0; z < randomNine.length; z++) {\r\n          if (isLegalMove(randomNine[z], i + 1, j + 1, randomBoard)) {\r\n            randomBoard[i][j] = randomNine[z];\r\n            randomNine.splice(z, 1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /* check if any of the top row contains 0 - if true, start refilling at\r\n     * top-middle block\r\n     */\r\n\r\n    for (i = rowBlockIndex; i < rowBlockIndex + 3; i++) {\r\n      for (j = colBlockIndex; j < colBlockIndex + 3; j++) {\r\n        if (randomBoard[i][j] === 0) {\r\n          k = 1;\r\n          continue fillBlock;\r\n        }\r\n      }\r\n    }\r\n    k++;\r\n  }\r\n\r\n  // fill the first column\r\n\r\n  const numsToFillFirstColumn = generateRandomNineNum().filter(\r\n    (num) =>\r\n      num !== randomBoard[0][0] &&\r\n      num !== randomBoard[1][0] &&\r\n      num !== randomBoard[2][0]\r\n  );\r\n\r\n  for (j = 3; j < randomBoard[0].length; j++) {\r\n    randomBoard[j][0] = numsToFillFirstColumn.pop();\r\n  }\r\n\r\n  // solved the random board to generate a filled, legal board\r\n\r\n  return solve(randomBoard)[0];\r\n};\r\n\r\nconst calculateSumOfCandidates = function (puzzleBoard) {\r\n  const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  let sumOfCandidates = 0,\r\n    i,\r\n    j,\r\n    num;\r\n\r\n  for (i = 0; i < puzzleBoard.length; i++) {\r\n    for (j = 0; j < puzzleBoard[0].length; j++) {\r\n      if (puzzleBoard[i][j] === 0) {\r\n        for (num of nums) {\r\n          if (isLegalMove(num, i + 1, j + 1, puzzleBoard)) sumOfCandidates++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return sumOfCandidates;\r\n};\r\n\r\nconst generateSudoku = function () {\r\n  let difficultyEstimate = 0,\r\n    pairA,\r\n    board,\r\n    nextBoard;\r\n  while (difficultyEstimate < 130) {\r\n    board = generateRandomFilledBoard();\r\n\r\n    /* keeps removing clues\r\n     * until the board can be solved with more than 1 solution\r\n     */\r\n    while (true) {\r\n      do {\r\n        pairA = [Math.floor(Math.random() * 9), Math.floor(Math.random() * 9)];\r\n      } while (board[pairA[0]][pairA[1]] === 0);\r\n\r\n      nextBoard = _.cloneDeep(board);\r\n      nextBoard[pairA[0]][pairA[1]] = 0;\r\n\r\n      if (solve(nextBoard).length > 1) break;\r\n      else {\r\n        board[pairA[0]][pairA[1]] = 0;\r\n      }\r\n    }\r\n    difficultyEstimate = calculateSumOfCandidates(board);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport {\r\n  newBoard,\r\n  isLegalMove,\r\n  isLegalPlacement,\r\n  isBoardLegal,\r\n  findNextEmpty,\r\n  isFilled,\r\n  isSolved,\r\n  solveHelper,\r\n  solve,\r\n  generateRandomNineNum,\r\n  generateRandomFilledBoard,\r\n  generateSudoku,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport SolutionButton from \"./SolutionButton\";\r\nimport ImportButton from \"./ImportButton\";\r\nimport _ from \"lodash\";\r\n\r\nimport { removeProgressSquares } from \"../sudoku/visual\";\r\nimport { newBoard, solve, generateSudoku } from \"../sudoku/algorithm\";\r\n\r\nconst Panel = (props) => {\r\n  const [numString, setNumString] = useState(\"\");\r\n\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (e.target[0].value.length === 81) {\r\n      props.importBoard(e.target[0].value);\r\n    } else\r\n      window.alert(\r\n        \"Incorrect length. Please make sure the string contains 81 digits.\"\r\n      );\r\n  };\r\n\r\n  const updateNumString = (e) => {\r\n    setNumString(e.target.value);\r\n  };\r\n\r\n  const onRefreshButtonClick = () => {\r\n    const emptyBoard = newBoard();\r\n    props.setBoard(emptyBoard);\r\n    props.setProgressBoard(_.cloneDeep(emptyBoard));\r\n  };\r\n\r\n  const onSolveButtonClick = () => {\r\n    if (solve(props.board).length) {\r\n      console.log(\"inside if statemetn!\");\r\n      const solutionBoard = solve(props.board)[0];\r\n      props.setProgressBoard(solutionBoard);\r\n      const progressSquares = document.getElementsByClassName(\"progress\");\r\n      Array.from(progressSquares).forEach((square) => {\r\n        square.classList.add(\"solution\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const onSetBoardButtonClick = () => {\r\n    const currentBoard = _.cloneDeep(props.progressBoard);\r\n    props.setBoard(currentBoard);\r\n    removeProgressSquares();\r\n  };\r\n\r\n  const onGenerateSudokuButtonClick = () => {\r\n    const newBoard = generateSudoku();\r\n    props.setBoard(newBoard);\r\n    props.setProgressBoard(newBoard);\r\n    removeProgressSquares();\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui container center aligned\">\r\n      <div id=\"panelRow1\">\r\n        <Button\r\n          onButtonClick={onGenerateSudokuButtonClick}\r\n          text=\"Generate Sudoku\"\r\n        />\r\n        <Button onButtonClick={onSolveButtonClick} text=\"Solve Puzzle\" />\r\n      </div>\r\n\r\n      <div id=\"panelRow2\">\r\n        <Button onButtonClick={onSetBoardButtonClick} text=\"Set Board\" />\r\n        <Button onButtonClick={onRefreshButtonClick} text=\"Clear Board\" />\r\n      </div>\r\n      <div id=\"panelRow3\">\r\n        <SolutionButton solve={solve} board={props.board} />\r\n        <ImportButton\r\n          onFormSubmit={onFormSubmit}\r\n          updateNumString={updateNumString}\r\n          numString={numString}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","import Panel from \"./Panel\";\r\nimport _ from \"lodash\";\r\nimport React from \"react\";\r\n\r\nimport \"../css/Solver.css\";\r\n\r\nimport { removeProgressSquares, removeSolutionSquares } from \"../sudoku/visual\";\r\nimport { newBoard, isLegalPlacement } from \"../sudoku/algorithm\";\r\n\r\nclass Solver extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { board: newBoard(), progressBoard: newBoard() };\r\n  }\r\n\r\n  /*\r\n   * Loading Sudoku\r\n   */\r\n\r\n  importBoard = (numString) => {\r\n    const importBoard = newBoard();\r\n    if (numString.length !== importBoard.length * importBoard.length)\r\n      throw new Error(\r\n        \"Fail to import: numString length is not equal to board length ^ 2\"\r\n      );\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n\r\n    for (let n = 0; n < numString.length; n++) {\r\n      importBoard[i][j] = parseInt(numString[n]);\r\n      if (j !== 8) {\r\n        j += 1;\r\n      } else {\r\n        i += 1;\r\n        j = 0;\r\n      }\r\n    }\r\n\r\n    removeProgressSquares();\r\n    removeSolutionSquares();\r\n\r\n    this.setState({\r\n      board: importBoard,\r\n      progressBoard: _.cloneDeep(importBoard),\r\n    });\r\n  };\r\n\r\n  setBoard = (board) => {\r\n    removeSolutionSquares();\r\n    this.setState({ board });\r\n  };\r\n\r\n  setProgressBoard = (board) => {\r\n    this.setState({ progressBoard: board });\r\n  };\r\n\r\n  /*\r\n   *Render Elements & Display Logic\r\n   */\r\n\r\n  processInput = (e) => {\r\n    if (e.target.classList.contains(\"solution\"))\r\n      e.target.classList.remove(\"solution\");\r\n\r\n    // Input must be a number\r\n    if (Number.isInteger(Number(e.nativeEvent.data))) {\r\n      const newBoard = _.cloneDeep(this.state.progressBoard);\r\n      const targetRow = e.target.id[0];\r\n      const targetCol = e.target.id[1];\r\n      if (this.state.board[targetRow - 1][targetCol - 1] === 0) {\r\n        newBoard[targetRow - 1][targetCol - 1] = Number(e.nativeEvent.data);\r\n        this.setState({ progressBoard: newBoard });\r\n      }\r\n    }\r\n  };\r\n\r\n  renderBoard() {\r\n    let rowCounter = 0;\r\n    let colCounter = 0;\r\n    return this.state.progressBoard.map((row) => {\r\n      rowCounter += 1;\r\n      return (\r\n        <tr key={`row${rowCounter}`}>\r\n          {row.map((num) => {\r\n            if (colCounter >= 9) colCounter = 1;\r\n            else colCounter += 1;\r\n            return (\r\n              <td key={`${rowCounter}${colCounter}`}>\r\n                <input\r\n                  className=\"numSquare\"\r\n                  placeholder={num === 0 ? \"\" : num}\r\n                  value={num === 0 ? \"\" : num}\r\n                  onChange={(e) => {\r\n                    this.processInput(e);\r\n                  }}\r\n                  id={`${rowCounter}${colCounter}`}\r\n                ></input>\r\n              </td>\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Lifecycle\r\n   */\r\n\r\n  componentDidMount() {\r\n    for (let row = 1; row <= this.state.board.length; row++) {\r\n      for (let col = 1; col <= this.state.board[0].length; col++) {\r\n        if (this.state.board[row - 1][col - 1] === 0) {\r\n          document.getElementById(`${row}${col}`).classList.add(\"progress\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    for (let row = 1; row <= this.state.board.length; row++) {\r\n      for (let col = 1; col <= this.state.board[0].length; col++) {\r\n        if (this.state.board[row - 1][col - 1] === 0) {\r\n          document.getElementById(`${row}${col}`).classList.add(\"progress\");\r\n        }\r\n\r\n        if (\r\n          !isLegalPlacement(\r\n            this.state.progressBoard[row - 1][col - 1],\r\n            row,\r\n            col,\r\n            this.state.progressBoard\r\n          )\r\n        ) {\r\n          document.getElementById(`${row}${col}`).classList.add(\"illegal\");\r\n        } else if (\r\n          document.getElementById(`${row}${col}`).classList.contains(\"illegal\")\r\n        ) {\r\n          document.getElementById(`${row}${col}`).classList.remove(\"illegal\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"ui container\" id=\"tableWrapper\">\r\n          <table className=\"ui celled table\">\r\n            <tbody>{this.renderBoard()}</tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"ui center aligned container\">\r\n          <Panel\r\n            importBoard={this.importBoard}\r\n            progressBoard={this.state.progressBoard}\r\n            board={this.state.board}\r\n            setProgressBoard={this.setProgressBoard}\r\n            setBoard={this.setBoard}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Solver;\r\n\r\n// testB.importBoard(\r\n//   \"000000010004087006060053000623008700700000025000702000030070002800024560052001040\"\r\n// );\r\n\r\n// testB.printBoard(testB.board);\r\n// console.log(\"==============================\");\r\n// solveA.solution().printBoard();\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Solver from \"./Solver\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Solver />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}